name: "Expose Tunnel"
description: "Easily create tunnels to access your GitHub Action workflows from public endpoints"
inputs:
  service:
    required: true
    description: Which tunneling service to use
  port:
    required: true
    description: The local port we are creating a tunnel to
  selfHostedEndpoint:
    required: false
    description: No, unless `bore.selfhosted` was specified as the `service`
  fallback:
    required: false
    description: Fallback strategy if the preferred `service` isn't available (e.g. self-hosted is down, fallback to managed service)
  blocking:
    required: false
    description: If the step should block and keep the job alive for the specified amount of time. This means you won't be able to use the output in later steps since the tunnel will be closing after the step.
outputs:
  tunnel-url:
    description: "The tunnel url that exposes the local service"
  tunnel_url:
    description: "The tunnel url that exposes the local service"
branding:
  icon: message-circle
  color: purple
runs:
  using: "composite"
  steps:
    - run: |
        # We manually set the input since we are using a composite step.
        export INPUT_SERVICE=${{ inputs.service }}
        export INPUT_PORT=${{ inputs.port }}
        export INPUT_SELFHOSTEDENDPOINT=${{ inputs.selfHostedEndpoint }}
        export INPUT_FALLBACK=${{ inputs.fallback }}
        export INPUT_BLOCKING=${{ inputs.blocking }}
        # Start the tunneling process in the background.
        node dist/index.js &
      shell: bash

    # Wait for it to have set the tunnel url and be done.
    - run: |
        timeout 30s bash -c 'until [ -f ./.tunnel-is-ready ]; do sleep 1; echo "Waiting for ./.tunnel-is-ready to be ready..."; done;'
        cat ./resources/.tunnel-url
        echo "tunnel-url=$(cat ./resources/.tunnel-url)" >>$GITHUB_OUTPUT
      shell: bash
